- Mobile responsive design for index.html [Signin, Signup buttons are not correctly positioned]
- Sign in is leading to living room [Feature: If the user ordered previously then go to living room, either go to shopping/index.html] ---> True
- Add some Loading splash screens [Login, checkout, Users.html in Admin]
- Adding status to orders ---> True
- For the previous point, if the user had orders with confirmed status then, enter the livingroom is enabled ---> True

- Receiving email with the order placed

macew52323@cigidea.com -> ordered
6rZ_Pki_)4fbP-B

#ff6600
47 W 13th St, New York, NY 10011, USA

boyik62572@cigidea.com -> not ordered + admin
>5wX?"c2R5_?YxQ

kefosa4511@eduhed.com -> not ordered
')7Yd*umC=S+#Y&

sihidir201@eduhed.com -> not ordered
)bcw7L$9e#72SbJ

in the orderid add the functioaltiy of the max char length 15 ... and show up a window with all of the oredr id 

For this page, when the user creates an issue, remove the 'Asignee ' input field in 'Create New Issues' and make the Issues to be added 

ModuleWorks
Construct-It

jenelo4399@linacit.com
sn9#vB7kY,c85w4

I want the table of 'Reorders' to fetch the data from the Firebase/Firestore and display them as following:
- Image — the image of the part whose url is in the `image` document field in the `parts` subcollection
- Type — the name of the part from `name` document field in the `parts` subcollection
- Reorder Date — the data at which the reorder is reordered from `timestamp` document field in the `reorders` subcollection but with this format '06/05/2025'
- Price  — the name of the part from `price` document field in the `parts` subcollection
- Quantity  — the name of the part from `quantity` document field in the `reorders` subcollection which represents the number of parts reordered in the reorder
- Description — the name of the part from `quantity` document field in the `reorders` subcollection which represents the number of parts reordered in the reorder

Add admin profile display functionality that shows the current logged-in admin's information in the header:
1. Display the admin's profile picture and full name from their user profile
2. Fetch data from both 'admins' and 'users' collections:
   - First verify admin status in 'admins' collection
   - Then get profile data from 'users' collection
3. Include fallbacks:
   - Use displayName if fullName is not available
   - Use generic profile picture if profilePicture is not available
4. Handle authentication states:
   - Redirect to login if not authenticated
   - Show error if not an admin
5. Add proper error handling and cleanup of auth listeners

